import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import * as api from './wallAPI';
import { Wall } from '../../common/types/wall';
import { buildWall, Options } from '../../common/utils/wall';

export interface WallState {
  current: Wall | null;
}

const initialState: WallState = {
  current: null,
};

/**
 * Typed
export const loadWall = createAsyncThunk<
  // Return type of the payload creator
  Wall | null
  // // First argument to the payload creator (arg)
  // void,
  // // Second argument to the payload creator (thunkAPI)
  // {
  // }
>(
  'wall/load',
  async () => {
    return _loadWall();
  },
);
*/

export const loadWallAsync = createAsyncThunk<Wall | null, void>(
  'wall/load',
  async () => {
    return api.getWall();
  },
);

export const saveWallAsync = createAsyncThunk<void, Wall>(
  'wall/save',
  async (wall: Wall) => {
    api.saveWall(wall);
  },
);

export const wallSlice = createSlice({
  name: 'wall',
  initialState,

  reducers: {
    buildWall: (state, action: PayloadAction<Options>) => {
      const wall: Wall | null = buildWall(action.payload);
      if (wall) {
        state.current = wall;
      }
    },
    updateWallCourses: (state, action: PayloadAction<Array<string>>) => {
      if (state.current) {
        state.current.courses = action.payload;
      }
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadWallAsync.fulfilled, (state, action) => {
        state.current = action.payload;
      });
      // .addCase(saveWall.fulfilled, (state, action) => {
      // });
  },
});

// export const { buildWall, updateWallCourses } = wallSlice.actions;

export const selectWall = (store :RootState) => store.wall;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*
export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};
*/

export default wallSlice.reducer;
