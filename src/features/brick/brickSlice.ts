import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import * as api from './brickAPI';
import { BrickDimension } from '../../common/types/brick-dimension';
import { CoursingChart } from '../../common/types/coursing-chart';
import { STANDARD as brickDimension } from '../../common/constants/bricks';
import { STANDARD_BRICK_76 as coursingChart } from '../../common/constants/coursing-charts';
import { findCoursingChartForBrickHeight } from '../../common/utils/coursing-chart';

// const coursingChart = findCoursingChartForBrickHeight(brickDimension.height);

export interface BrickState {
  brickDimension: BrickDimension;
  coursingChart: CoursingChart,
}

const initialState: BrickState = {
  brickDimension,
  coursingChart,
};

export const loadBrick = createAsyncThunk(
  'brick/load',
  async () => {
    return api.getBrick();
  },
);

export const brickSlice = createSlice({
  name: 'brick',
  initialState,

  reducers: {
    changeBrick: (state, action: PayloadAction<BrickDimension>) => {
      state.brickDimension = action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadBrick.fulfilled, (state, action) => {
        const brickDimension = action.payload;
        if (brickDimension) {
          state.brickDimension = brickDimension;
        }
      });
  },
});

export const selectBrick = (store :RootState) => store.brick;

export default brickSlice.reducer;
